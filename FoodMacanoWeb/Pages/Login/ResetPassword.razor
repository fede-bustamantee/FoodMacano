@page "/restablecer"
@inject FirebaseAuthService AuthService
@inject IUsuarioService UsuarioService 

<div class="page-container">
    <div class="reset-container">
        <div class="brand-logo">
            <img src="/img/logoo1.png" alt="" class="logo-image" />
        </div>
        <h1 class="reset-title">Restablece la contraseña</h1>
        <p class="reset-description">
            Escribe la dirección de correo electrónico vinculado a tu cuenta de Food Macano y
            te enviaremos un mensaje.
        </p>
        <div class="login-form">
            <EditForm Model="@usuario" OnSubmit="HandleResetPassword">
                <div class="form-group">
                    <label for="email">Correo electrónico</label>
                    <input type="email" id="email" class="form-control" @bind="usuario.Email" placeholder="Correo electrónico" />
                </div>
                <button type="submit" class="reset-button">
                    Enviar enlace
                </button>
            </EditForm>
        </div>
    </div>
</div>

<link href="css/alert.css" rel="stylesheet" />

@code {
    private Usuario usuario = new Usuario();

    private async Task HandleResetPassword(EditContext context)
    {
        try
        {
            // Validación de correo vacío
            if (string.IsNullOrWhiteSpace(usuario.Email))
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Por favor, ingresa un correo electrónico",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            // Verificar si el usuario existe en la base de datos
            var usuarioExistente = await UsuarioService.ObtenerUsuarioPorEmailAsync(usuario.Email);

            if (usuarioExistente == null)
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "No existe ninguna cuenta asociada a este correo electrónico",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            // Si el usuario existe, intentar enviar el correo de restablecimiento
            var success = await AuthService.ResetPassword(usuario.Email);

            if (success)
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "¡Correo enviado!",
                        Text = "Se ha enviado un enlace para restablecer tu contraseña. Por favor revisa tu bandeja de entrada.",
                        Icon = SweetAlertIcon.Success,
                        Timer = 3000,
                        ShowConfirmButton = false
                    });
                usuario.Email = string.Empty;
                NavigationManager.NavigateTo("/login");

            }
            else
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Ocurrió un error al enviar el correo de restablecimiento",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
            }
        }
        catch (Exception ex)
        {
            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Ocurrió un error al procesar tu solicitud. Por favor, intenta nuevamente más tarde.",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Aceptar"
                });
            Console.Error.WriteLine($"Error al restablecer contraseña: {ex.Message}");
        }
    }
}