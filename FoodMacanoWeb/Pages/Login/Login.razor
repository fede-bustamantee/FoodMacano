@page "/login"
@inject IJSRuntime JSRuntime
@inject FirebaseAuthService AuthService
@inject IUsuarioService UsuarioService

<div class="auth-container">
    <div class="auth-content">
        <!--Logo-->
        <div class="brand-logo">
            <img src="/img/logoo1.png" alt="" />
        </div>

        <h1>Inicia sesión en Food Macano</h1>

        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <div class="alert alert-danger">@mensajeError</div>
        }

        @if (!EstaAutenticado)
        {
            <div class="social-login-buttons">
                <button class="social-button google-button" @onclick="IniciarSesionConGoogle">
                    <img src="/img/google.png" alt="Google" />
                    <span>Continuar con Google</span>
                </button>
            </div>

            <div class="divider">
                <hr />
            </div>

            <div class="login-form">
                <div class="form-group">
                    <label for="email">Correo electrónico</label>
                    <input type="email" id="email" class="form-control" @bind="usuario.Email" placeholder="Correo electrónico" />
                </div>
                <div class="form-group">
                    <label for="password">Contraseña</label>
                    <input type="password" id="password" class="form-control" @bind="usuario.Password" placeholder="Contraseña" />
                </div>

                <button class="login-button" @onclick="IniciarSesion">
                    Iniciar sesión
                </button>
            </div>

            <a href="/restablecer" class="forgot-password">¿Se te ha olvidado la contraseña?</a>
        }

        <div class="register-link">
            <span>¿No tienes cuenta?</span>
            <a href="" @onclick="NavegarARegistro">Registrate a Food Macano</a>
        </div>
    </div>
</div>

@code {
    private Usuario usuario = new Usuario();
    private bool EstaAutenticado = false;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        EstaAutenticado = await AuthService.IsUserAuthenticated();
    }

    private async Task IniciarSesion()
    {
        mensajeError = string.Empty;

        try
        {
            // Inicia sesión en Firebase y obtiene el FirebaseId y el estado de verificación del correo
            var (firebaseId, isEmailVerified) = await AuthService.SignInWithEmailPassword(usuario.Email, usuario.Password);

            if (!string.IsNullOrEmpty(firebaseId))
            {
                if (!isEmailVerified)
                {
                    mensajeError = "Por favor, verifica tu correo electrónico antes de iniciar sesión.";
                    return;
                }

                EstaAutenticado = true;

                // Verifica si el usuario ya existe en la base de datos mediante el FirebaseId
                var usuarioExistente = await UsuarioService.ObtenerUsuarioPorFirebaseIdAsync(firebaseId);

                if (usuarioExistente == null)
                {
                    // Si el usuario no existe, lo creamos en la base de datos
                    var nuevoUsuario = new Usuario
                        {
                            FirebaseId = firebaseId,
                            User = usuario.User ?? "NombrePorDefecto",
                            Email = usuario.Email
                        };

                    await UsuarioService.CrearUsuarioAsync(nuevoUsuario);
                }

                // Guarda el FirebaseId en el almacenamiento local
                await JSRuntime.InvokeVoidAsync("localStorageHelper.setItem", new object[] { "firebaseUserId", firebaseId });
                // Redirige a la página principal después del inicio de sesión exitoso
                NavigationManager.NavigateTo("/");
            }
            else
            {
                mensajeError = "Error al obtener FirebaseId.";
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error: {ex.Message}";
        }
    }

    private async Task IniciarSesionConGoogle()
    {
        mensajeError = string.Empty;

        try
        {
            var (firebaseId, email, displayName) = await AuthService.SignInWithGoogle();

            if (!string.IsNullOrEmpty(firebaseId))
            {
                EstaAutenticado = true;

                var usuarioExistente = await UsuarioService.ObtenerUsuarioPorFirebaseIdAsync(firebaseId);

                if (usuarioExistente == null)
                {
                    string userName = !string.IsNullOrEmpty(displayName)
                        ? displayName
                        : email.Split('@')[0]; // Usa la parte del email antes del @ como fallback

                    var nuevoUsuario = new Usuario
                        {
                            FirebaseId = firebaseId,
                            User = userName,
                            Email = email,
                            Password = "defaultPassword",
                            TipoUsuario = TipoUsuarioEnum.Cliente
                        };

                    await UsuarioService.CrearUsuarioAsync(nuevoUsuario);
                }

                await JSRuntime.InvokeVoidAsync("localStorageHelper.setItem", new object[] { "firebaseUserId", firebaseId });
                NavigationManager.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            mensajeError = "Ocurrió un error durante la autenticación. Inténtalo más tarde.";
            Console.WriteLine($"Error en IniciarSesionConGoogle: {ex.Message}");
        }
    }

    private async Task CerrarSesion()
    {
        await AuthService.SignOut();
        usuario = new Usuario();
        EstaAutenticado = false;
        NavigationManager.NavigateTo("/");
    }
    private void NavegarARegistro()
    {
        NavigationManager.NavigateTo("/register");
    }
}
