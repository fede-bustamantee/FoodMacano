@page "/register"
@inject FirebaseAuthService AuthService
@inject IUsuarioService UsuarioService
@inject NavigationManager NavigationManager

<div class="auth-container">
    <div class="auth-content">
        <div class="brand-logo">
            <img src="/img/logoo1.png" alt="Logo" />
        </div>
        <h1>Registrate para probar nuestros platillos</h1>
        <div class="login-form">
            <div class="form-group">
                <label for="email">Correo electrónico</label>
                <input type="email" @bind="usuario.Email" class="form-control" id="email" placeholder="Ingresa tu correo electrónico">
            </div>
            <div class="form-group">
                <label for="password">Contraseña</label>
                <input type="password" @bind="password" class="form-control" id="password" placeholder="Ingresa tu contraseña">
            </div>
            <div class="form-group">
                <label for="user">Nombre de usuario</label>
                <input type="text" @bind="usuario.User" class="form-control" id="user" placeholder="Ingresa tu nombre de usuario">
            </div>
            <div class="form-group">
                <label for="tipoUsuario">Tipo de usuario</label>
                <select @bind="usuario.TipoUsuario" class="form-control" id="tipoUsuario">
                    <option value="Cliente">Cliente</option>
                    <option value="Empleado">Empleado</option>
                    <option value="Gerente">Gerente</option>
                </select>
            </div>
            <button @onclick="Registe" class="login-button">Registrarse</button>
            <div class="register-link">
                <span>¿Ya tienes una cuenta?</span>
                <a href="/login">Inicia sesión aquí</a>
            </div>
        </div>
    </div>
</div>
<link href="css/alert.css" rel="stylesheet" />
@code {
    private Usuario usuario = new Usuario();
    private string password = string.Empty; // Separamos la contraseña del objeto Usuario

    private async Task Registe()
    {
        try
        {
            // Validaciones
            if (string.IsNullOrWhiteSpace(usuario.Email))
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Por favor, ingresa un correo electrónico",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            if (string.IsNullOrWhiteSpace(password))
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Por favor, ingresa una contraseña",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            if (password.Length < 6)
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "La contraseña debe tener al menos 6 caracteres",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            if (string.IsNullOrWhiteSpace(usuario.User))
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Por favor, ingresa un nombre de usuario",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            // Verificar si el correo ya está registrado
            var usuarioExistente = await UsuarioService.ObtenerUsuarioPorEmailAsync(usuario.Email);
            if (usuarioExistente != null)
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Este correo electrónico ya está registrado",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                return;
            }

            // Intentar crear el usuario en Firebase
            var firebaseId = await AuthService.RegisterWithEmailPassword(usuario.Email, password);

            if (!string.IsNullOrEmpty(firebaseId))
            {
                // Asignar la contraseña y el firebaseId antes de crear el usuario en la BD
                usuario.Password = password;
                usuario.FirebaseId = firebaseId;
                await UsuarioService.CrearUsuarioAsync(usuario);

                // Mostrar mensaje de éxito sin mencionar la verificación de email
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "¡Registro exitoso!",
                        Text = "Tu cuenta ha sido creada correctamente.",
                        Icon = SweetAlertIcon.Success,
                        Timer = 2500,
                        ShowConfirmButton = false
                    });

                NavigationManager.NavigateTo("/login");
            }
            else
            {
                await SweetAlert.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "No se pudo completar el registro. Por favor, intenta nuevamente.",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
            }
        }
        catch (Exception ex)
        {
            string errorMessage = "Ocurrió un error durante el registro.";

            // Personalizar mensajes según el error
            if (ex.Message.Contains("email-already-in-use"))
            {
                errorMessage = "Este correo electrónico ya está registrado.";
            }
            else if (ex.Message.Contains("invalid-email"))
            {
                errorMessage = "El formato del correo electrónico no es válido.";
            }
            else if (ex.Message.Contains("weak-password"))
            {
                errorMessage = "La contraseña es demasiado débil.";
            }

            await SweetAlert.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = errorMessage,
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Aceptar"
                });
            Console.WriteLine($"Error en registro: {ex.Message}");
        }
    }
}