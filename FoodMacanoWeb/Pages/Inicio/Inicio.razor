@page "/"
@inject IAleatorioService<Producto> aleatorioService
@inject IGenericService<Negocio> negocioService
@inject IEncargueService encarguesService
@inject FirebaseAuthService firebaseAuthService
@inject IUsuarioService UsuarioService
@inject IJSRuntime JSRuntime

<PageTitle>Food Macano</PageTitle>

<header>
    <div class="menu container">
        <img class="logo-1" src="img/logo.svg" alt="Alternate Text" />
        <input type="checkbox" id="menu" />
        <label for="menu">
            <img src="img/menu.png" alt="Alternate Text" class="menu-icono" />
        </label>
        <nav class="navbar">
            <div class="menu-1">
                <ul>
                    <li><a href="/">Inicio</a></li>
                    <li><a href="menu" class="nav-link">Menú</a></li>
                    <li><a href="horarios" class="nav-link">Horarios</a></li>
                </ul>
            </div>

            <img class="logo-2" src="img/MACANO.png" alt="Alternate Text" />
            <div class="menu-2">
                <ul>
                    <li><a href="" class="nav-link" id="open-sidebar">Mis Encargues</a></li>
                </ul>
                <div class="socials">
                    @if (negocio?.RedesSocial != null)
                    {
                        <a href="@negocio.RedesSocial.Whatsapp" target="_blank">
                            <div class="social">
                                <i class="fa-brands fa-whatsapp"></i>
                            </div>
                        </a>
                        <a href="@negocio.RedesSocial.Instagram" target="_blank">
                            <div class="social">
                                <i class="fa-brands fa-instagram"></i>
                            </div>
                        </a>
                        <a href="@negocio.RedesSocial.Facebook" target="_blank">
                            <div class="social">
                                <i class="fa-brands fa-facebook"></i>
                            </div>
                        </a>
                    }
                </div>
                <div class="user-icon relative">
                    @if (isAuthenticated)
                    {
                        <div @onclick="TogglePopup" class="circle cursor-pointer">@userInitial</div>
                        @if (showPopup)
                        {
                            <div class="profile-popup">
                                <div class="popup-content">
                                    <div class="user-info">
                                        <p class="email">@usuario?.Email</p>
                                        <div class="large-circle">@userInitial</div>
                                        <h2 class="saludo">¡Hola, @usuario?.User!</h2>
                                    </div>
                                    <div class="popup-actions">
                                        <button class="logout-button" @onclick="SignOut">
                                            <p>Cerrar Sesión</p>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <a href="login" class="nav-link">
                            <img src="/img/userr.png" alt="Usuario" class="user-icon-img" />
                        </a>
                    }
                </div>
            </div>
        </nav>
    </div>

    <div class="header-content container">
        <div class="swiper mySwiper-1">
            <div class="swiper-wrapper">
                @foreach (var producto in productos ?? new List<Producto>())
                {
                    <div class="swiper-slide">
                        <div class="slider">
                            <div class="slider-txt">
                                <h1>@producto.Nombre</h1>
                                <p>@producto.DescripcionProducto?.DescripcionCorta</p>
                                <div class="botones">
                                    <a href="menu" class="btn-1">Encargar</a>
                                    <a href="informacion/@producto.Id" class="btn-1">Información</a>
                                </div>
                            </div>
                            <div class="slider-img">
                                <img src="@producto.ImagenUrl" alt="@producto.Nombre" />
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="swiper-button-next"></div>
            <div class="swiper-button-prev"></div>
        </div>
        <div class="swiper-pagination"></div>
    </div>
</header>

<div class="sidebar" id="sidebar">
    <div class="sidebar-close">
        <i class="fa-solid fa-xmark" id="close-sidebar"></i>
    </div>
    <div class="cart-menu">
        <h3>Mis ENCARGUES</h3>
        <div id="cart-items">
            <DynamicComponent Type="typeof(DetalleEncargue)"
                              Parameters="@(new Dictionary<string, object> { { "encargues", encargues } })" />
        </div>
    </div>
</div>

<script>
    var swiper = new Swiper('.mySwiper-1', {
        loop: false,
        autoplay: {
            delay: 6000, // Cambia a la siguiente diapositiva cada 6 segundos (6000 ms)
            disableOnInteraction: false, // Sigue cambiando después de que el usuario interactúe
        },
        pagination: {
            el: '.swiper-pagination',
            clickable: true,
        },
        navigation: {
            nextEl: '.swiper-button-next',
            prevEl: '.swiper-button-prev',
        },
    });


    // Abrir el sidebar
    document.getElementById('open-sidebar').addEventListener('click', (e) => {
        e.preventDefault();
        document.getElementById('sidebar').classList.add('open');
    });

    // Cerrar el sidebar al hacer clic en la cruz (fa-xmark)
    document.getElementById('close-sidebar').addEventListener('click', () => {
        document.getElementById('sidebar').classList.remove('open');
    });

        window.addClickOutsideHandler = (dotnetHelper) => {
        document.addEventListener('click', (e) => {
            const popup = document.querySelector('.profile-popup');
            const circle = document.querySelector('.circle');
            if (popup && !popup.contains(e.target) && !circle.contains(e.target)) {
                dotnetHelper.invokeMethodAsync('ClosePopup');
            }
        });
    };
</script>
<link rel="stylesheet" href="css/swiper.css" />

@code {
    private List<Producto>? productos;
    private List<Encargue> encargues = new List<Encargue>();
    private Negocio? negocio;
    private bool isAuthenticated = false;
    private string userInitial = string.Empty;
    private bool showPopup = false;
    private Usuario? usuario;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            productos = await aleatorioService.GetAleatoriosAsync();
            negocio = await negocioService.GetByIdAsync(1);

            var userId = await firebaseAuthService.GetUserId();

            if (!string.IsNullOrEmpty(userId))
            {
                usuario = await UsuarioService.ObtenerUsuarioPorFirebaseIdAsync(userId);
                if (usuario == null)
                {
                    throw new InvalidOperationException($"No se encontró usuario con FirebaseId: {userId}");
                }

                encargues = await encarguesService.GetEncarguesAsync(userId);
                isAuthenticated = true;

                if (!string.IsNullOrEmpty(usuario.User))
                {
                    userInitial = usuario.User.Substring(0, 1).ToUpper();
                }
            }
            else
            {
                isAuthenticated = false;
                usuario = null;
                encargues = new List<Encargue>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al inicializar el componente: {ex.Message}");
        }
    }

    private void TogglePopup()
    {
        showPopup = !showPopup;
    }

    private async Task SignOut()
    {
        await firebaseAuthService.SignOut();

        // Restablecer variables relacionadas con el usuario
        isAuthenticated = false;
        usuario = null;
        userInitial = string.Empty;
        encargues = new List<Encargue>();

        // Actualiza la vista para reflejar los cambios
        StateHasChanged();

        // Redirige al usuario a la página de inicio
        NavigationManager.NavigateTo("/");
    }


    private void ManageAccount()
    {
        NavigationManager.NavigateTo("/profile");
    }

    [JSInvokable]
    public void ClosePopup()
    {
        if (showPopup)
        {
            showPopup = false;
            StateHasChanged();
        }
    }
}
